"""create user, session, account tables

Revision ID: e12cf1afb421
Revises: 
Create Date: 2025-05-22 23:38:37.591252

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e12cf1afb421'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index('ix_users_email_phone', 'users', ['email', 'phone_number'], unique=False)
    op.create_index(op.f('ix_users_phone_number'), 'users', ['phone_number'], unique=True)
    op.create_table('accounts',
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('account_number', sa.String(), nullable=False),
    sa.Column('account_type', sa.String(), nullable=False),
    sa.Column('balance', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('currency', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('account_id'),
    sa.UniqueConstraint('account_number')
    )
    op.create_index('ix_account_user_number', 'accounts', ['user_id', 'account_number'], unique=False)
    op.create_table('sessions',
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('session_id')
    )
    op.create_index(op.f('ix_sessions_user_id'), 'sessions', ['user_id'], unique=False)
    op.create_table('agent_events',
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('agent_name', sa.String(), nullable=False),
    sa.Column('event_type', sa.String(), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.session_id'], ),
    sa.PrimaryKeyConstraint('event_id')
    )
    op.create_index('ix_agent_event_session', 'agent_events', ['session_id'], unique=False)
    op.create_table('auth_events',
    sa.Column('auth_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('success', 'failure', name='authstatusenum'), nullable=False),
    sa.Column('auth_method', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.session_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('auth_id')
    )
    op.create_index('ix_auth_events_user_session', 'auth_events', ['user_id', 'session_id'], unique=False)
    op.create_table('fallback_help_requests',
    sa.Column('help_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('intent', sa.String(), nullable=False),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('resolved', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.session_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('help_id')
    )
    op.create_index('ix_fallback_help_user_session', 'fallback_help_requests', ['user_id', 'session_id'], unique=False)
    op.create_table('fraud_alerts',
    sa.Column('alert_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('alert_type', sa.String(), nullable=False),
    sa.Column('detected_at', sa.DateTime(), nullable=True),
    sa.Column('resolved', sa.Boolean(), nullable=True),
    sa.Column('resolution_notes', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.session_id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('alert_id')
    )
    op.create_index('ix_fraud_alert_user_session', 'fraud_alerts', ['user_id', 'session_id'], unique=False)
    op.create_table('messages',
    sa.Column('message_id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('sender', sa.Enum('user', 'bot', name='senderenum'), nullable=False),
    sa.Column('content', sa.String(), nullable=False),
    sa.Column('message_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.session_id'], ),
    sa.PrimaryKeyConstraint('message_id')
    )
    op.create_index('ix_messages_session_id', 'messages', ['session_id'], unique=False)
    op.create_table('transactions',
    sa.Column('transaction_id', sa.UUID(), nullable=False),
    sa.Column('from_account_id', sa.UUID(), nullable=False),
    sa.Column('to_account_number', sa.String(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=15, scale=2), nullable=False),
    sa.Column('status', sa.Enum('pending', 'completed', 'failed', name='transactionstatusenum'), nullable=False),
    sa.Column('reference_id', sa.String(), nullable=True),
    sa.Column('message_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['from_account_id'], ['accounts.account_id'], ),
    sa.PrimaryKeyConstraint('transaction_id'),
    sa.UniqueConstraint('reference_id')
    )
    op.create_index('ix_transaction_from_account', 'transactions', ['from_account_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_transaction_from_account', table_name='transactions')
    op.drop_table('transactions')
    op.drop_index('ix_messages_session_id', table_name='messages')
    op.drop_table('messages')
    op.drop_index('ix_fraud_alert_user_session', table_name='fraud_alerts')
    op.drop_table('fraud_alerts')
    op.drop_index('ix_fallback_help_user_session', table_name='fallback_help_requests')
    op.drop_table('fallback_help_requests')
    op.drop_index('ix_auth_events_user_session', table_name='auth_events')
    op.drop_table('auth_events')
    op.drop_index('ix_agent_event_session', table_name='agent_events')
    op.drop_table('agent_events')
    op.drop_index(op.f('ix_sessions_user_id'), table_name='sessions')
    op.drop_table('sessions')
    op.drop_index('ix_account_user_number', table_name='accounts')
    op.drop_table('accounts')
    op.drop_index(op.f('ix_users_phone_number'), table_name='users')
    op.drop_index('ix_users_email_phone', table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
